import { getConfig, runConfig, _findRobot, _getNextGap, calcGPS, solve, convertConfig, solve2 } from '../src/15modules';

const test1 = `########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

<^^>>>vv<v>>v<<`;

const config1 = {
  layout: [
    ['#','#','#','#','#','#','#','#'],
    ['#','.','.','O','.','O','.','#'],
    ['#','#','@','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','#','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','.','.','.','.','.','#'],
    ['#','#','#','#','#','#','#','#'],
  ],

  dirs: ['<','^','^','>','>','>','v','v','<','v','>','>','v','<','<'],
};

const completedLayout1 = [
    ['#','#','#','#','#','#','#','#'],
    ['#','.','.','.','.','O','O','#'],
    ['#','#','.','.','.','.','.','#'],
    ['#','.','.','.','.','.','O','#'],
    ['#','.','#','O','@','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','#','#','#','#','#','#','#'],
];

const config2 = {
  layout: config1.layout,
  dirs: ['<'],
};

const completedLayout2 = [
    ['#','#','#','#','#','#','#','#'],
    ['#','.','.','O','.','O','.','#'],
    ['#','#','@','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','#','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','.','.','.','.','.','#'],
    ['#','#','#','#','#','#','#','#'],
];

const config3 = {
  layout: config1.layout,
  dirs: ['^'],
};

const completedLayout3 = [
    ['#','#','#','#','#','#','#','#'],
    ['#','.','@','O','.','O','.','#'],
    ['#','#','.','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','#','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','.','.','.','.','.','#'],
    ['#','#','#','#','#','#','#','#'],
];

const config4 = {
  layout: config1.layout,
  dirs: ['^', '>'],
};

const completedLayout4 = [
    ['#','#','#','#','#','#','#','#'],
    ['#','.','.','@','O','O','.','#'],
    ['#','#','.','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','#','.','O','.','.','#'],
    ['#','.','.','.','O','.','.','#'],
    ['#','.','.','.','.','.','.','#'],
    ['#','#','#','#','#','#','#','#'],
];

const test21 = `#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^`;

const config21 = {
  layout: [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','[',']','@','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ],

  dirs: ['<','v','v','<','<','^','^','<','<','^','^'],
};

const completedLayout21 = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','[',']','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','@','.','[',']','.','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
];

const large = `##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^`;

const largeEnd = `####################
##[].......[].[][]##
##[]...........[].##
##[]........[][][]##
##[]......[]....[]##
##..##......[]....##
##..[]............##
##..@......[].[][]##
##......[][]..[]..##
####################`;

describe('getConfig', () => {

  test('getConfig --> test1', () => {
    expect(getConfig(test1)).toEqual(config1);
  });

});

describe('_findRobot', () => {

  test('_findRobot --> test1', () => {
    expect(_findRobot(config1.layout)).toEqual([2, 2]);
  });

  test('_findRobot --> test2', () => {
    expect(_findRobot(completedLayout1)).toEqual([4, 4]);
  });

});

describe('_getNextGap', () => {

  test('_getNextGap --> look down and find a gap', () => {
    expect(_getNextGap(config1.layout, 4, 2, 0, 1)).toEqual([4, 6]);
  });

  test('_getNextGap --> look up and find a wall', () => {
    expect(_getNextGap(config1.layout, 3, 1, 0, -1)).toEqual([]);
  });

test('_getNextGap --> look right and find a wall', () => {
  expect(_getNextGap(completedLayout1, 5, 1, 1, 0)).toEqual([]);
});

});

describe('runConfig', () => {

  test('runConfig --> test1 (full run)', () => {
    expect(runConfig(config1)).toEqual(completedLayout1);
  });

  test('runConfig --> test2', () => {
    expect(runConfig(config2)).toEqual(completedLayout2);
  });

  test('runConfig --> test3', () => {
    expect(runConfig(config3)).toEqual(completedLayout3);
  });

  test('runConfig --> test4', () => {
    expect(runConfig(config4)).toEqual(completedLayout4);
  });

});

describe('calcGPS', () => {

  test('calcGPS --> test1', () => {
    expect(calcGPS(completedLayout1)).toEqual(2028);
  });

});

describe('solve', () => {

  test('solve --> test1', () => {
    expect(solve(test1)).toEqual(2028);
  });

});

describe('convertConfig', () => {

  test('convertConfig --> test1', () => {
    expect(convertConfig(getConfig(test21))).toEqual(config21);
  });

});

describe('runConfig part 2', () => {

  const config21l = {
    layout: config21.layout,
    dirs: ['<'],
  };

  const completedLayout21l = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','.','.','.','[',']','[',']','@','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> left', () => {
    expect(runConfig(config21l)).toEqual(completedLayout21l);
  });

  const config21u = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','@','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['^'],
  };

  const completedLayout21u = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','@','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> up', () => {
    expect(runConfig(config21u)).toEqual(completedLayout21u);
  });

  const config21u2 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','@','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['^', '^'],
  };

  const completedLayout21u2 = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','@','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> up twice, second time hits a wall', () => {
    expect(runConfig(config21u2)).toEqual(completedLayout21u2);
  });

  const config21d1 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','@','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['v'],
  };

  const completedLayout21d1 = [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','@','.','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> down once', () => {
    expect(runConfig(config21d1)).toEqual(completedLayout21d1);
  });

  const config21d2 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','@','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['v', 'v'],
  };

  const completedLayout21d2 = [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','@','.','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> down twice, second time hits a wall', () => {
    expect(runConfig(config21d2)).toEqual(completedLayout21d2);
  });


  const config21r5 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','@','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['>', '>', '>', '>', '>', '>', '>'],
  };

  const completedLayout21r5 = [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','@','[',']','[',']','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> right 7 times, hits a wall after 3', () => {
    expect(runConfig(config21d2)).toEqual(completedLayout21d2);
  });


  const config21u5 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','.','.','.','#','#'],
      ['#','#','.','.','.','@','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['^','^','^','^','^'],
  };

  const completedLayout21u5 = [
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ['#','#','.','.','.','[',']','.','#','#','.','.','#','#'],
    ['#','#','.','.','.','@','.','.','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','[',']','.','.','.','#','#'],
    ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
    ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
    ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> up 5, hits wall after 2', () => {
    expect(runConfig(config21u5)).toEqual(completedLayout21u5);
  });


  const config21l5 = {
    layout: [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','[',']','[',']','@','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
    ],

    dirs: ['<','<','<','<','<'],
  };

  const completedLayout21l5 = [
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
      ['#','#','.','.','.','.','.','.','#','#','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','[',']','[',']','@','.','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','[',']','.','.','.','.','#','#'],
      ['#','#','.','.','.','.','.','.','.','.','.','.','#','#'],
      ['#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
  ];

  test('runConfig --> test2 -> left 5, hits wall after 3', () => {
    expect(runConfig(config21l5)).toEqual(completedLayout21l5);
  });

  test('runConfig --> test2 (full run)', () => {
    expect(runConfig(config21)).toEqual(completedLayout21);
  });

  test('runConfig --> large test 2', () => {
    const config = getConfig(large);
    const specialConfig = convertConfig(config);
    const result = largeEnd.split('\n').map(line => line.split(''));
    expect(runConfig(specialConfig)).toEqual(result);
  });

});

describe('solve2', () => {

  test('solve2 --> test1', () => {
    expect(solve2(large)).toEqual(9021);
  });

});
